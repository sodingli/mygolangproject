#########################################
#contains environment
include .env


NO_COLOR=\033[0m
OK_COLOR=\033[0;36m
WARN_COLOR=\033[33;01m
ERROR_COLOR=\033[31;01m


PROJECTNAME=$(shell basename "$(PWD)")

# Go related variables.
GOBASE=$(shell pwd)
GOPATH=$(GOBASE)/vendor:$(GOBASE)
GOBIN=$(GOBASE)/bin
GOFILES=$(wildcard *.go)

# Redirect error output to a file, so we can show it in development mode.
STDERR=/tmp/.$(PROJECTNAME)-stderr.txt

# PID file will store the server process id when it's running on development mode
PID=/tmp/.$(PROJECTNAME)-api-server.pid

# Make is verbose in Linux. Make it silent.
MAKEFLAGS += --silent




################################################
#安装依赖
## install: Install missing dependencies. Runs `go get` internally. e.g; make install get=github.com/foo/bar
install: go-get


###############################################
#清空构建缓存 编译代码 后台执行服务
## start: Start in development mode. Auto-starts when code changes.
start:
    bash -c "trap 'make stop' EXIT; $(MAKE) compile start-server watch run='make compile start-server'"

## stop: Stop development mode.
stop: stop-server

start-server: stop-server
    @echo "  >  $(PROJECTNAME) is available at $(ADDR)"
    @-$(GOBIN)/$(PROJECTNAME) 2>&1 & echo $$! > $(PID)
    @cat $(PID) | sed "/^/s/^/  \>  PID: /"

stop-server:
    @-touch $(PID)
    @-kill `cat $(PID)` 2> /dev/null || true
    @-rm $(PID)

## watch: Run given command when code changes. e.g; make watch run="echo 'hey'"
watch:
    @GOPATH=$(GOPATH) GOBIN=$(GOBIN) yolo -i . -e vendor -e bin -c "$(run)"

restart-server: stop-server start-server


###############################################
#编译
## compile: Compile the binary.
compile:
    @-touch $(STDERR)
    @-rm $(STDERR)
    @-$(MAKE) -s go-compile 2> $(STDERR)
    @cat $(STDERR) | sed -e '1s/.*/\nError:\n/'  | sed 's/make\[.*/ /' | sed "/^/s/^/     /" 1>&2


###############################################
#为了简化操作，我们可以添加一个 exec 命令，该命令执行任何给定的命令，并使用上面定义的自定义 GOPATH。
## exec: Run given command, wrapped with custom GOPATH. e.g; make exec run="go test ./..."
exec:
    @GOPATH=$(GOPATH) GOBIN=$(GOBIN) $(run)

## clean: Clean build files. Runs `go clean` internally.
clean:
    @(MAKEFILE) go-clean

go-compile: go-clean go-get go-build

go-build:
    @echo "  >  Building binary..."
    @GOPATH=$(GOPATH) GOBIN=$(GOBIN) go build -o $(GOBIN)/$(PROJECTNAME) $(GOFILES)

go-build-client:
	@echo "${OK_COLOR}Build $@ begin${NO_COLOR}"
	cd ${MKFILE_DIR} && go build ${GO_BUILD_FLAGS} -o ${CLIENT_TARGET} cmd/client/main.go


go-build-server:
	@echo "${OK_COLOR}Build $@ begin${NO_COLOR}"
	cd ${MKFILE_DIR} && go build ${GO_BUILD_FLAGS} -o ${SERVER_TARGET} cmd/server/main.go


go-generate:
    @echo "  >  Generating dependency files..."
    @GOPATH=$(GOPATH) GOBIN=$(GOBIN) go generate $(generate)

go-get:
    @echo "  >  Checking if there is any missing dependencies..."
    @GOPATH=$(GOPATH) GOBIN=$(GOBIN) go get $(get)

go-install:
    @GOPATH=$(GOPATH) GOBIN=$(GOBIN) go install $(GOFILES)

go-clean:
    @echo "  >  Cleaning build cache"
    @GOPATH=$(GOPATH) GOBIN=$(GOBIN) go clean

.PHONY: help
all: help
help: Makefile
    @echo
    @echo " Choose a command run in "$(PROJECTNAME)":"
    @echo
    @sed -n 's/^##//p' $< | column -t -s ':' |  sed -e 's/^/ /'
    @echo
